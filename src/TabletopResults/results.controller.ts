import { Controller, Post, Body, Param, Get, Query, Res, HttpStatus } from "@nestjs/common";
import { ResultsService } from './results.service';
import { TabletopResultsDto } from "../database/dto/tabletop-results.dto";
import { Response } from "express";
import { Public } from "../common/decorators";
//

@Controller('results')
export class ResultsController {
  constructor(private readonly resultsService: ResultsService) { }

  @Public()
  @Post('/tabletop')
  async submitResults2(@Body('results') results: TabletopResultsDto[]): Promise<any> {
    console.log('===============>', 'in results controller');
    return this.resultsService.saveResultsHussain(results);
  }

  @Public()
  @Get('/analysis/:campaignId')
  async getAnalysisByCampaign(@Param('campaignId') campaignId: string): Promise<any> {
    return this.resultsService.analyzeResultsByCampaign(campaignId);
  }
  // get results of all participants in a campaign
  @Public()
  @Get('/campaign/:campaignId/participants')
  async getParticipantResults(@Param('campaignId') campaignId: string): Promise<any> {
    return this.resultsService.getResultsByParticipant(campaignId);
  }

  // The below code was generated by chatGPT. Done by Hussain.
  // 1. Get average performance across all users
  @Public()
  @Get('average/:campaignId')
  async getAveragePerformance(@Param('campaignId') campaignId: string) {
    return this.resultsService.getAveragePerformance(campaignId);
  }

  // 2. Get category-wise performance
  @Public()
  @Get('category-wise/:campaignId')
  async getCategoryWisePerformance(@Param('campaignId') campaignId: string) {
    return this.resultsService.getCategoryWisePerformance(campaignId);
  }

  // 3. Get performance distribution
  @Public()
  @Get('distribution/:campaignId')
  async getPerformanceDistribution(@Param('campaignId') campaignId: string) {
    return this.resultsService.getPerformanceDistribution(campaignId);
  }

  // 4. Get overall performance comparison
  @Public()
  @Get('comparison/:campaignId')
  async getOverallPerformanceComparison(@Param('campaignId') campaignId: string) {
    return this.resultsService.getOverallPerformanceComparison(campaignId);
  }

  // Combine all the data of all campaigns and get their data
  @Public()
  @Get('tabletop/radar-chart-data')
  async getTabletopRadarChartData() {
    return this.resultsService.getCategoryWisePerformanceRadarChart();
  }

  @Public()
  @Get('tabletop/bar-chart-data')
  async getTabletopBarChartData() {
    return this.resultsService.getPerformanceDistribution();
  }

  @Public()
  @Get('tabletop/doughnut-chart-data/:campaignId')
  async getTabletopDoughnutChartData(@Param('campaignId') campaignId: string, @Res() res: Response) {
    const response = await this.resultsService.getTabletopMarksObtainedDoughnutChart(campaignId);
    if (response === null) {
      res.status(HttpStatus.NOT_FOUND).send();
    } else {
      res.status(HttpStatus.OK).send(response);
    }
  }
  @Public()
  @Get('tabletop/grade/:campaignId')
  async getTabletopCampaignResultGrade(@Param('campaignId') campaignId: string, @Res() res: Response) {
    const response = await this.resultsService.getResultsWithGrades(campaignId);
    res.status(HttpStatus.OK).send(response);
  }

}